Encapsulation. In object-oriented programming, 
a class is used to group together properties and methods that relate to each other and operate on those properties.
For instance, when considering a mobile device, it encompasses a range of hardware and software components such as a camera, display, memory cards, and more. 
The beauty of encapsulation is that you do not need to be concerned with the internal wiring and workings of these components.

Abstraction. An extension to encapsulation. 
The idea is to hide the internal implementation logic as much as possible. 
For example, to take a photo with your mobile phone, all you need to do is open the camera app, 
point your phone to the scene that you want to capture, and click a button
to capture the photo. You don't need to know how the camera app is built or how the camera hardware on your mobile phone actually works. 
In short, the internal mechanics of the camera app and how a mobile camera captures the photos are abstracted to let you perform the tasks that matter.

Inheritance. Enables you to build a class upon the characteristics and behavior of other classes by establishing a parent-child relationship. 
For example, there are different manufacturers who produce a variety of mobile devices that run Android OS, but the UI for each of the devices is different. 
In other words, the manufacturers inherit the Android OS feature and build their customizations on top of it.
Polymorphism. The word is an adaptation of the Greek root poly-, which means many, and -morphism, which means forms. 
Polymorphism is the ability to use different objects in a single, common way. 
For example, when you connect a Bluetooth speaker to your mobile phone, the phone only needs to know that there's a device that can play audio over Bluetooth.
However, there are a variety of Bluetooth speakers that you can choose from and your phone doesn't need to know how to work with each of them specifically.
